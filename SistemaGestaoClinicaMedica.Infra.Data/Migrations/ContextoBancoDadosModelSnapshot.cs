// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SistemaGestaoClinicaMedica.Infra.Data;

namespace SistemaGestaoClinicaMedica.Infra.Data.Migrations
{
    [DbContext(typeof(ContextoBancoDados))]
    partial class ContextoBancoDadosModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Administrador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Cargo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Nome")
                        .IsUnique();

                    b.ToTable("Cargo");

                    b.HasData(
                        new
                        {
                            Id = "Administrador",
                            Nome = "Administrador"
                        },
                        new
                        {
                            Id = "Medico",
                            Nome = "Médico"
                        },
                        new
                        {
                            Id = "Recepcionista",
                            Nome = "Recepcionista"
                        },
                        new
                        {
                            Id = "Laboratorio",
                            Nome = "Laboratório"
                        });
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Especialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Nome")
                        .IsUnique();

                    b.ToTable("Especialidade");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc2175bb-ddb0-4adb-ab10-d833fe4dd3e3"),
                            Nome = "Clínica Médica"
                        },
                        new
                        {
                            Id = new Guid("1fce2684-7655-4792-b97c-f0eccf906186"),
                            Nome = "Cirurgia Geral"
                        },
                        new
                        {
                            Id = new Guid("10dd8bb8-66c8-406b-b5e5-ee4cbd8bff54"),
                            Nome = "Pediatria"
                        },
                        new
                        {
                            Id = new Guid("c8becf9e-c068-47a1-937f-caa0c30f1a18"),
                            Nome = "Ginecologia e Obstetrícia"
                        },
                        new
                        {
                            Id = new Guid("d37de9e5-2688-4d13-a08d-376a19f54a9e"),
                            Nome = "Anestesiologia"
                        },
                        new
                        {
                            Id = new Guid("c0e064b6-aca9-420f-a90c-73a2e0c684c6"),
                            Nome = "Ortopedia e Traumatologia"
                        },
                        new
                        {
                            Id = new Guid("38b22d9b-9829-4ab9-adf3-0aef7168fea7"),
                            Nome = "Oftalmologia"
                        },
                        new
                        {
                            Id = new Guid("7f8f18e0-b970-4943-92ce-07e3e03dc715"),
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = new Guid("d3662bee-ca6c-475e-b1ef-949fa795c5c9"),
                            Nome = "Radiologia e Diagnóstico por Imagem"
                        },
                        new
                        {
                            Id = new Guid("bbdb70af-606e-464b-8374-eb1eb0fd7ed5"),
                            Nome = "Psiquiatria"
                        },
                        new
                        {
                            Id = new Guid("e929046a-55d9-41eb-a5c5-76c753557767"),
                            Nome = "Dermatologia"
                        },
                        new
                        {
                            Id = new Guid("b633bb60-d194-4f76-ab91-c01da6e10145"),
                            Nome = "Otorrinolaringologia"
                        },
                        new
                        {
                            Id = new Guid("c140277b-4a84-4bd1-9ecc-50d9184879e4"),
                            Nome = "Medicina de Família e Comunidade"
                        },
                        new
                        {
                            Id = new Guid("35c83d9c-4dd5-40d4-a0e7-172b5f5c81e3"),
                            Nome = "Endocrinologia e Metabologia"
                        },
                        new
                        {
                            Id = new Guid("37a176d0-e8a1-4985-857f-bcff3de0d0d1"),
                            Nome = "Cirurgia Plástica"
                        },
                        new
                        {
                            Id = new Guid("8b4184e9-1615-47ad-bf48-fea9ccd141da"),
                            Nome = "Infectologia"
                        },
                        new
                        {
                            Id = new Guid("9c95aece-c4a7-4444-9c1b-0ccd22a5a422"),
                            Nome = "Cirurgia Vascular"
                        },
                        new
                        {
                            Id = new Guid("343ab7dc-2ec0-41e6-b332-fa6b0d61e51b"),
                            Nome = "Urologia"
                        },
                        new
                        {
                            Id = new Guid("5c66a70c-0977-4117-a4e3-24a1d258fea5"),
                            Nome = "Cancerologia"
                        },
                        new
                        {
                            Id = new Guid("04c3ae7d-ad74-44ca-ab79-9c5c2790a7ea"),
                            Nome = "Nefrologia"
                        },
                        new
                        {
                            Id = new Guid("a2a7c7d3-982d-4880-8f39-bd4739744e53"),
                            Nome = "Nutrologia"
                        });
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("CargoId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2020, 2, 29, 1, 12, 53, 403, DateTimeKind.Local).AddTicks(161));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.HorarioDeTrabalho", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DiaDaSemana")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Fim")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("FimAlmoco")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Inicio")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("InicioAlmoco")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MedicoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.ToTable("HorarioDeTrabalho");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Laboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Laboratorio");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CRM")
                        .IsUnique();

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.MedicoEspecialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("MedicoId");

                    b.ToTable("MedicoEspecialidade");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Recepcionista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Recepcionista");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Administrador", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.HorarioDeTrabalho", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Medico", null)
                        .WithMany("HorariosDeTrabalho")
                        .HasForeignKey("MedicoId");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Laboratorio", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Medico", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.MedicoEspecialidade", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Medico", "Medico")
                        .WithMany("Especialidades")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Especialidade", "Especialidade")
                        .WithMany("Medicos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Recepcionista", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId");
                });
#pragma warning restore 612, 618
        }
    }
}
