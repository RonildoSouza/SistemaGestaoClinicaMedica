// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SistemaGestaoClinicaMedica.Infra.Data;

namespace SistemaGestaoClinicaMedica.Infra.Data.Migrations
{
    [DbContext(typeof(ContextoBancoDados))]
    [Migration("20200313003659_CriaTabelaReceita")]
    partial class CriaTabelaReceita
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Administrador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Atestado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConsultaId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacao")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("TipoDeAtestadoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("TipoDeAtestadoId");

                    b.ToTable("Atestado");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Cargo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Nome")
                        .IsUnique();

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Consulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacao")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusConsultaId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("StatusConsultaId");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Especialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Nome")
                        .IsUnique();

                    b.ToTable("Especialidade");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Exame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConsultaId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LaboratorioRealizouExameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkResultadoExame")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("Observacao")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("StatusExameId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TipoDeExameId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("LaboratorioRealizouExameId");

                    b.HasIndex("StatusExameId");

                    b.HasIndex("TipoDeExameId");

                    b.ToTable("Exame");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Fabricante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Fabricante");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("CargoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.HorarioDeTrabalho", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DiaDaSemana")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Fim")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("FimAlmoco")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Inicio")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("InicioAlmoco")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MedicoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.ToTable("HorarioDeTrabalho");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Laboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("DaClinica")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Laboratorio");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Medicamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<Guid>("FabricanteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("NomeFabrica")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Tarja")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FabricanteId");

                    b.HasIndex("Nome", "NomeFabrica")
                        .IsUnique();

                    b.ToTable("Medicamento");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CRM")
                        .IsUnique();

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.MedicoEspecialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("MedicoId");

                    b.ToTable("MedicoEspecialidade");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Receita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ConsultaId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId")
                        .IsUnique();

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.ReceitaMedicamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MedicamentoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReceitaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("ReceitaMedicamento");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Recepcionista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("Recepcionista");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.StatusConsulta", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Nome")
                        .IsUnique();

                    b.ToTable("StatusConsulta");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.StatusExame", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Nome")
                        .IsUnique();

                    b.ToTable("StatusExame");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.TipoDeAtestado", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Nome")
                        .IsUnique();

                    b.ToTable("TipoDeAtestado");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.TipoDeExame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Id", "Nome")
                        .IsUnique();

                    b.ToTable("TipoDeExame");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Administrador", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Atestado", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Consulta", "Consulta")
                        .WithMany("Atestados")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.TipoDeAtestado", "TipoDeAtestado")
                        .WithMany()
                        .HasForeignKey("TipoDeAtestadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Consulta", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Especialidade", "Especialidade")
                        .WithMany()
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.StatusConsulta", "StatusConsulta")
                        .WithMany()
                        .HasForeignKey("StatusConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Exame", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Consulta", "Consulta")
                        .WithMany("Exames")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Laboratorio", "LaboratorioRealizouExame")
                        .WithMany()
                        .HasForeignKey("LaboratorioRealizouExameId");

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.StatusExame", "StatusExame")
                        .WithMany()
                        .HasForeignKey("StatusExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.TipoDeExame", "TipoDeExame")
                        .WithMany()
                        .HasForeignKey("TipoDeExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.HorarioDeTrabalho", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Medico", null)
                        .WithMany("HorariosDeTrabalho")
                        .HasForeignKey("MedicoId");
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Laboratorio", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Medicamento", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Fabricante", "Fabricante")
                        .WithMany()
                        .HasForeignKey("FabricanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Medico", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.MedicoEspecialidade", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Especialidade", "Especialidade")
                        .WithMany("Medicos")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Medico", "Medico")
                        .WithMany("Especialidades")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Receita", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Consulta", "Consulta")
                        .WithOne("Receita")
                        .HasForeignKey("SistemaGestaoClinicaMedica.Dominio.Entidades.Receita", "ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.ReceitaMedicamento", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Medicamento", "Medicamento")
                        .WithMany("Receitas")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Receita", "Receita")
                        .WithMany("Medicamentos")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaGestaoClinicaMedica.Dominio.Entidades.Recepcionista", b =>
                {
                    b.HasOne("SistemaGestaoClinicaMedica.Dominio.Entidades.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
