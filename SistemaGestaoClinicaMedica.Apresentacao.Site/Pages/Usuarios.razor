@page "/usuarios"
@attribute [Authorize(Roles = "Administrador")]

@using SistemaGestaoClinicaMedica.Aplicacao.DTO;
@using SistemaGestaoClinicaMedica.Apresentacao.Site.Extensions;
@using SistemaGestaoClinicaMedica.Apresentacao.Site.Servicos;
@inherits TableBase<IUsuariosServico, UsuarioDTO, Guid>

<HeaderComponent Title="Usuários" NewRoute="usuarios/novo" />

<TableComponent Items="dtos">
    <TableHeader>
        <th>Nome</th>
        <th>Cargo</th>
        <th>Telefone</th>
        <th>Ativo</th>
        <th></th>
    </TableHeader>
    <RowTemplate>
        <td>@context.Nome</td>
        <td>@context.Cargo.Nome</td>
        <td>@context.Telefone</td>
        <td>@(context.Ativo ? "Sim" : "Não")</td>
        <td>
            <button @onclick="(e => EditarUsuario(context.Cargo.Id, context.Id))" class="btn"><span class="oi oi-pencil" aria-hidden="true"></span></button>

            @if (context.Ativo && !context.ESuperUsuario)
            {
                <ConfirmDialogComponent Id="@context.Id.ToString()"
                                        Message="@($"O usuário {context.Nome} será inativado, deseja prosseguir?")"
                                        ActionButtonText="Excluir"
                                        OnActionButton="@(e => Deletar(e, context.Id))">
                    <span class="oi oi-trash text-danger" aria-hidden="true"></span>
                </ConfirmDialogComponent>
            }
        </td>
    </RowTemplate>
</TableComponent>

@code{
    private async Task EditarUsuario(string cargoId, Guid id)
    {
        await LocalStorage.CriaUsuarioCargoIdEdicaoLocalStorageAsync(cargoId);
        NavigationManager.NavigateTo($"usuarios/{id}");
    }
}