@using SistemaGestaoClinicaMedica.Aplicacao.DTO;
@using SistemaGestaoClinicaMedica.Apresentacao.Site.Constantes;
@using SistemaGestaoClinicaMedica.Apresentacao.Site.Servicos;

@inherits TableBase<IExamesServico, ExameDTO, Guid>
@attribute [Authorize(Roles = "Administrador, Medico")]

<HeaderComponent NewRoute="@($"consultas/{Consulta.Id}/exames/novo")"  
                 MoreClassNewRoute="@_classDisabled"
                 CardMoreClass="remove-card-border-top"/>

<TableComponent Items="dtos">
    <TableHeader>
        <th>Codigo</th>
        <th>Tipo de Exame</th>
        <th>Laboratório</th>
        <th>Status</th>
        <th></th>
    </TableHeader>
    <RowTemplate>
        <td>@context.Codigo</td>
        <td>@context.TipoDeExame.Nome</td>
        <td>@context.LaboratorioRealizouExame?.Nome</td>
        <td>@context.StatusExame.Nome</td>
        <td>
            @if (context.StatusExame.Id == StatusExameConst.Pendente && context.CriadoEm.Date == DateTime.Now.Date)
            {
                <a href="consultas/@context.ConsultaId/exames/{@context.Id}" class="btn"><span class="oi oi-pencil" aria-hidden="true"></span></a>
                <ConfirmDialogComponent Id="@context.Id.ToString()"
                                        Message="@($"Deseja prosseguir com a exclusão do exame de {context.TipoDeExame.Nome}?")"
                                        ActionButtonText="Excluir"
                                        OnActionButton="@(e => Deletar(e, context.Id))">
                    <span class="oi oi-trash text-danger" aria-hidden="true"></span>
                </ConfirmDialogComponent>
            }

            @if (context.StatusExame.Id == StatusExameConst.Concluido)
            {
                <a href="@context.LinkResultadoExame" target="_blank" class="btn"><span class="oi oi-document" aria-hidden="true"></span></a>
            }
        </td>
    </RowTemplate>
</TableComponent>

@code {
    private string _classDisabled;

    [Parameter] public ConsultaDTO Consulta { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _classDisabled = Consulta.StatusConsultaId == StatusConsultaConst.Concluida 
                            || Consulta.StatusConsultaId == StatusConsultaConst.Cancelada
                            ? "disabled" 
                            : string.Empty;
    }

    protected async override Task CarregaDadosDaTabela()
    {
        dtos = await HttpServico.GetPorConsultaAsync(Consulta.Id);
    }
}