@page "/exames"
@attribute [Authorize(Roles = "Administrador, Medico")]

@using SistemaGestaoClinicaMedica.Aplicacao.DTO;
@using SistemaGestaoClinicaMedica.Apresentacao.Site.Constantes;
@using SistemaGestaoClinicaMedica.Apresentacao.Site.Servicos;
@inherits TableBase<IExamesServico, ExameDTO, Guid>

<HeaderComponent Title="Consultar Exames"
                 SearchText="Filtrar"
                 SearchPlaceholder="Informe o código do exame, consulta ou paciente"
                 SearchVisibled="true"
                 OnSearch="BuscarAsync">
    <div class="row">
        <div class="form-group col-md-12">
            <label for="status">Status</label>
            <select @onchange="SelecionaStatusExame" class="form-control" id="status">
                <option value=""></option>
                @foreach (var status in _statusExame)
                {
                    <option value="@status.Id" selected="@(status.Id == StatusExameConst.Pendente)">@status.Nome</option>
                }
            </select>
        </div>
    </div>
</HeaderComponent>

<TableComponent Items="dtos?.OrderByDescending(_ => _.CriadoEm).Take(20).ToList()">
    <TableHeader>
        <th>Código</th>
        <th>Tipo de Exame</th>
        <th>Status</th>
        <th>Laboratório Realizou o Exame</th>
        <th>Criado Em</th>
        <th></th>
    </TableHeader>
    <RowTemplate>
        <td>@context.Codigo</td>
        <td>@context.TipoDeExame.Nome</td>
        <td>@context.StatusExame.Nome</td>
        <td>@context.LaboratorioRealizouExame?.Nome</td>
        <td>@context.CriadoEm.ToShortDateString()</td>
        <td>
            @if (context.StatusExame.Id == StatusExameConst.Concluido)
            {
                <a href="@context.LinkResultadoExame" target="_blank" class="btn"><span class="oi oi-document" aria-hidden="true"></span></a>
            }
        </td>
    </RowTemplate>
</TableComponent>

@code{
    private List<StatusExameDTO> _statusExame = new List<StatusExameDTO>();
    private string _statusExameSelecionado = StatusExameConst.Pendente;
    private string _busca;

    [Inject] IStatusExamesServico StatusExamesServico { get; set; }
    [Inject] private ApplicationState ApplicationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _statusExame = await StatusExamesServico.GetAsync();
        await base.OnInitializedAsync();
    }

    private async Task BuscarAsync(string busca)
    {
        _busca = busca;
        await CarregaDadosDaTabela();
    }

    private void SelecionaStatusExame(ChangeEventArgs args)
    {
        _statusExameSelecionado = args.Value.ToString();
    }

    protected async override Task CarregaDadosDaTabela()
    {
        Guid? medicoId = null;

        if (ApplicationState.UsuarioLogado.EMedico)
            medicoId = ApplicationState.UsuarioLogado.Id;

        dtos = await HttpServico.GetTudoComFiltrosAsync(_busca, _statusExameSelecionado, medicoId);
        StateHasChanged();
    }
}